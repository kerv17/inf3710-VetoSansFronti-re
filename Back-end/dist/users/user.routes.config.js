"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersRoutes = void 0;
const SqlConnect_service_1 = require("./services/SqlConnect.service");
class UsersRoutes /*extends CommonRoutesConfig*/ {
    constructor(app) {
        this.sqlConnect = new SqlConnect_service_1.SqlConnect();
        this.app = app;
        this.configureRoutes();
    }
    configureRoutes() {
        this.app.route('/veto/:info')
            .get((req, res) => {
            this.sqlConnect.getOneAnimal(req.params.info).then(animals => {
                res.status(200).json(animals);
            }).catch(err => {
                res.status(404).send('Error');
            });
        })

            .delete((req, res) => {
            this.sqlConnect.deleteAnimal(req.params.info).then(message => {
                res.status(200).send(message);
            }).catch(err => {
                res.status(404).send('Error');
            });
        })
            .patch((req, res) => {
            this.sqlConnect.modifyAnimalInfo(req.body).then(message => {
                res.status(200).send(message);
            }).catch(err => {
                res.status(404).send('Error');
            });
        });
        this.app.route(`/veto`)
            .get((req, res) => {
            console.log('test');
            this.sqlConnect.getAllanimals().then(animals => {
                res.status(200).json(animals);
            }).catch(err => {
                res.status(404).send('Error');
            });
        })
            .post((req, res) => {
            this.sqlConnect.addAnimal(req.body).then((message) => {
                res.status(200).send(message);
            }).catch((err) => {
                res.status(404).send('Error');
            });

        });
        return this.app;
    }
}
exports.UsersRoutes = UsersRoutes;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5yb3V0ZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdXNlcnMvdXNlci5yb3V0ZXMuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHNFQUF3RDtBQUd4RCxNQUFhLFdBQVcsQ0FBQyw4QkFBOEI7SUFJbkQsWUFBWSxHQUF3QjtRQUNqQyw2QkFBNkI7UUFFN0IsSUFBSSxDQUFDLFVBQVUsR0FBRSxJQUFJLCtCQUFVLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQztRQUNiLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUcxQixDQUFDO0lBRUQsZUFBZTtRQUVYLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQzthQUM1QixHQUFHLENBQUMsQ0FBQyxHQUFvQixFQUFDLEdBQW9CLEVBQUMsRUFBRTtZQUc5QyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDakQsT0FBTyxDQUFBLEVBQUU7Z0JBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbEMsQ0FBQyxDQUVKLENBQUMsS0FBSyxDQUNILEdBQUcsQ0FBQSxFQUFFO2dCQUNMLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBSUgsQ0FBQyxDQUFDO2FBRUYsTUFBTSxDQUFDLENBQUMsR0FBb0IsRUFBQyxHQUFvQixFQUFDLEVBQUU7WUFHakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2pELE9BQU8sQ0FBQSxFQUFFO2dCQUNMLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFHO1lBRXBDLENBQUMsQ0FFSixDQUFDLEtBQUssQ0FDSCxHQUFHLENBQUEsRUFBRTtnQkFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztRQUdKLENBQUMsQ0FBQzthQUNBLEtBQUssQ0FBQyxDQUFDLEdBQW9CLEVBQUMsR0FBb0IsRUFBQyxFQUFFO1lBR2pELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUNqRCxPQUFPLENBQUEsRUFBRTtnQkFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBRztZQUVwQyxDQUFDLENBRUosQ0FBQyxLQUFLLENBQ0gsR0FBRyxDQUFBLEVBQUU7Z0JBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFHSixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUt0QixHQUFHLENBQUMsQ0FBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsRUFBRTtZQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUNwQyxPQUFPLENBQUEsRUFBRTtnQkFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVsQyxDQUFDLENBRUosQ0FBQyxLQUFLLENBQ0gsR0FBRyxDQUFBLEVBQUU7Z0JBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFHSCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsRUFBRTtZQUVwRCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFDLEVBQUU7Z0JBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBQyxFQUFFO2dCQUNkLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDO1FBRUwsQ0FBQyxDQUFDLENBQUM7UUFPUCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEIsQ0FBQztDQUVKO0FBekdELGtDQXlHQyJ9
